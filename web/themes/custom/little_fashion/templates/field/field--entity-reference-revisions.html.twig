{#
/**
 * @file
 * Default theme implementation for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @see template_preprocess_field()
 *
 * @ingroup themeable
 */
#}

{# 
  The following line defines a list of classes for the field's label based on the `label_display` value.
  If the label is set to 'visually_hidden', we add the 'visually-hidden' class to hide the label from visual display but keep it accessible to screen readers.
  You can customize this logic further depending on your needs.
#}
{% set title_classes = [
    label_display == 'visually_hidden' ? 'visually-hidden',
  ] %}
  
  {# 
    Iterate over all the items in the field. 
    The `items` variable contains the individual field items. Each item contains `content` (the main field content) and `attributes` (HTML attributes for that item).
    By default, we output each item's content here.
  #}
  {% for item in items %}
    {{ item.content }} {# Output the field item's content. #}
  {% endfor %}
  